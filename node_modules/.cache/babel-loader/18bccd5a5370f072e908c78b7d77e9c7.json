{"ast":null,"code":"var reactProperty = require('react-property');\n\nvar utilities = require('./utilities');\n\nvar setStyleProp = utilities.setStyleProp;\nvar htmlProperties = reactProperty.html;\nvar svgProperties = reactProperty.svg;\nvar isCustomAttribute = reactProperty.isCustomAttribute;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {object} [attributes={}] - HTML/SVG DOM attributes.\n * @return {object}                 - React props.\n */\n\nfunction attributesToProps(attributes) {\n  attributes = attributes || {};\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var property;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName]; // ARIA (aria-*) or custom data (data-*) attribute\n\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    } // convert HTML attribute to React prop\n\n\n    attributeNameLowerCased = attributeName.toLowerCase();\n\n    if (hasOwnProperty.call(htmlProperties, attributeNameLowerCased)) {\n      property = htmlProperties[attributeNameLowerCased];\n      props[property.propertyName] = property.hasBooleanValue || property.hasOverloadedBooleanValue && !attributeValue ? true : attributeValue;\n      continue;\n    } // convert SVG attribute to React prop\n\n\n    if (hasOwnProperty.call(svgProperties, attributeName)) {\n      property = svgProperties[attributeName];\n      props[property.propertyName] = attributeValue;\n      continue;\n    } // preserve custom attribute if React >=16\n\n\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  } // transform inline style to object\n\n\n  setStyleProp(attributes.style, props);\n  return props;\n}\n\nmodule.exports = attributesToProps;","map":{"version":3,"sources":["/Users/liza/Documents/GitHub/artwork-website/art/node_modules/html-react-parser/lib/attributes-to-props.js"],"names":["reactProperty","require","utilities","setStyleProp","htmlProperties","html","svgProperties","svg","isCustomAttribute","hasOwnProperty","Object","prototype","attributesToProps","attributes","attributeName","attributeNameLowerCased","attributeValue","property","props","toLowerCase","call","propertyName","hasBooleanValue","hasOverloadedBooleanValue","PRESERVE_CUSTOM_ATTRIBUTES","style","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIE,YAAY,GAAGD,SAAS,CAACC,YAA7B;AAEA,IAAIC,cAAc,GAAGJ,aAAa,CAACK,IAAnC;AACA,IAAIC,aAAa,GAAGN,aAAa,CAACO,GAAlC;AACA,IAAIC,iBAAiB,GAAGR,aAAa,CAACQ,iBAAtC;AAEA,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASG,iBAAT,CAA2BC,UAA3B,EAAuC;AACrCA,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AAEA,MAAIC,aAAJ;AACA,MAAIC,uBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAKJ,aAAL,IAAsBD,UAAtB,EAAkC;AAChCG,IAAAA,cAAc,GAAGH,UAAU,CAACC,aAAD,CAA3B,CADgC,CAGhC;;AACA,QAAIN,iBAAiB,CAACM,aAAD,CAArB,EAAsC;AACpCI,MAAAA,KAAK,CAACJ,aAAD,CAAL,GAAuBE,cAAvB;AACA;AACD,KAP+B,CAShC;;;AACAD,IAAAA,uBAAuB,GAAGD,aAAa,CAACK,WAAd,EAA1B;;AACA,QAAIV,cAAc,CAACW,IAAf,CAAoBhB,cAApB,EAAoCW,uBAApC,CAAJ,EAAkE;AAChEE,MAAAA,QAAQ,GAAGb,cAAc,CAACW,uBAAD,CAAzB;AACAG,MAAAA,KAAK,CAACD,QAAQ,CAACI,YAAV,CAAL,GACEJ,QAAQ,CAACK,eAAT,IACCL,QAAQ,CAACM,yBAAT,IAAsC,CAACP,cADxC,GAEI,IAFJ,GAGIA,cAJN;AAKA;AACD,KAnB+B,CAqBhC;;;AACA,QAAIP,cAAc,CAACW,IAAf,CAAoBd,aAApB,EAAmCQ,aAAnC,CAAJ,EAAuD;AACrDG,MAAAA,QAAQ,GAAGX,aAAa,CAACQ,aAAD,CAAxB;AACAI,MAAAA,KAAK,CAACD,QAAQ,CAACI,YAAV,CAAL,GAA+BL,cAA/B;AACA;AACD,KA1B+B,CA4BhC;;;AACA,QAAId,SAAS,CAACsB,0BAAd,EAA0C;AACxCN,MAAAA,KAAK,CAACJ,aAAD,CAAL,GAAuBE,cAAvB;AACD;AACF,GAzCoC,CA2CrC;;;AACAb,EAAAA,YAAY,CAACU,UAAU,CAACY,KAAZ,EAAmBP,KAAnB,CAAZ;AAEA,SAAOA,KAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBf,iBAAjB","sourcesContent":["var reactProperty = require('react-property');\nvar utilities = require('./utilities');\n\nvar setStyleProp = utilities.setStyleProp;\n\nvar htmlProperties = reactProperty.html;\nvar svgProperties = reactProperty.svg;\nvar isCustomAttribute = reactProperty.isCustomAttribute;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {object} [attributes={}] - HTML/SVG DOM attributes.\n * @return {object}                 - React props.\n */\nfunction attributesToProps(attributes) {\n  attributes = attributes || {};\n\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var property;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML attribute to React prop\n    attributeNameLowerCased = attributeName.toLowerCase();\n    if (hasOwnProperty.call(htmlProperties, attributeNameLowerCased)) {\n      property = htmlProperties[attributeNameLowerCased];\n      props[property.propertyName] =\n        property.hasBooleanValue ||\n        (property.hasOverloadedBooleanValue && !attributeValue)\n          ? true\n          : attributeValue;\n      continue;\n    }\n\n    // convert SVG attribute to React prop\n    if (hasOwnProperty.call(svgProperties, attributeName)) {\n      property = svgProperties[attributeName];\n      props[property.propertyName] = attributeValue;\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // transform inline style to object\n  setStyleProp(attributes.style, props);\n\n  return props;\n}\n\nmodule.exports = attributesToProps;\n"]},"metadata":{},"sourceType":"script"}