{"ast":null,"code":"var _jsxFileName = \"/Users/liza/Documents/GitHub/artwork-website/art/src/Gallery/PhotoGallery.js\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Lightbox from 'react-images';\nimport Image from './Image.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PhotoGallery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: this.props.images,\n      thumbnails: [],\n      lightboxIsOpen: this.props.isOpen,\n      currentImage: this.props.currentImage,\n      containerWidth: 0\n    };\n    this.onResize = this.onResize.bind(this);\n    this.closeLightbox = this.closeLightbox.bind(this);\n    this.gotoImage = this.gotoImage.bind(this);\n    this.gotoNext = this.gotoNext.bind(this);\n    this.gotoPrevious = this.gotoPrevious.bind(this);\n    this.onClickImage = this.onClickImage.bind(this);\n    this.openLightbox = this.openLightbox.bind(this);\n    this.onSelectImage = this.onSelectImage.bind(this);\n  }\n\n  componentDidMount() {\n    this.onResize();\n  }\n\n  componentWillReceiveProps(np) {\n    if (this.state.currentImage > np.images.length - 1) {\n      this.setState({\n        currentImage: np.images.length - 1\n      });\n    }\n\n    if (this.state.images !== np.images || this.props.maxRows !== np.maxRows) {\n      this.setState({\n        images: np.images,\n        thumbnails: this.renderThumbs(this._gallery.clientWidth, np.images)\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this._gallery) return;\n\n    if (this._gallery.clientWidth !== this.state.containerWidth) {\n      this.onResize();\n    }\n  }\n\n  onResize() {\n    if (!this._gallery) return;\n    this.setState({\n      containerWidth: Math.floor(this._gallery.clientWidth),\n      thumbnails: this.renderThumbs(this._gallery.clientWidth)\n    });\n  }\n\n  openLightbox(index, event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (this.props.lightboxWillOpen) {\n      this.props.lightboxWillOpen.call(this, index);\n    }\n\n    if (this.props.currentImageWillChange) {\n      this.props.currentImageWillChange.call(this, index);\n    }\n\n    this.setState({\n      currentImage: index,\n      lightboxIsOpen: true\n    });\n  }\n\n  closeLightbox() {\n    if (this.props.lightboxWillClose) {\n      this.props.lightboxWillClose.call(this);\n    }\n\n    if (this.props.currentImageWillChange) {\n      this.props.currentImageWillChange.call(this, 0);\n    }\n\n    this.setState({\n      currentImage: 0,\n      lightboxIsOpen: false\n    });\n  }\n\n  gotoPrevious() {\n    if (this.props.currentImageWillChange) {\n      this.props.currentImageWillChange.call(this, this.state.currentImage - 1);\n    }\n\n    this.setState({\n      currentImage: this.state.currentImage - 1\n    });\n  }\n\n  gotoNext() {\n    if (this.props.currentImageWillChange) {\n      this.props.currentImageWillChange.call(this, this.state.currentImage + 1);\n    }\n\n    this.setState({\n      currentImage: this.state.currentImage + 1\n    });\n  }\n\n  onClickImage() {\n    if (this.state.currentImage === this.props.images.length - 1) return;\n    this.gotoNext();\n  }\n\n  onSelectImage(index, event) {\n    event.preventDefault();\n    if (this.props.onSelectImage) this.props.onSelectImage.call(this, index, this.state.images[index]);\n  }\n\n  gotoImage(index) {\n    if (this.props.currentImageWillChange) {\n      this.props.currentImageWillChange.call(this, index);\n    }\n\n    this.setState({\n      currentImage: index\n    });\n  }\n\n  getOnClickThumbnailFn() {\n    if (!this.props.onClickThumbnail && this.props.enableLightbox) return this.openLightbox;\n    if (this.props.onClickThumbnail) return this.props.onClickThumbnail;\n    return null;\n  }\n\n  getOnClickLightboxThumbnailFn() {\n    if (!this.props.onClickLightboxThumbnail && this.props.showLightboxThumbnails) return this.gotoImage;\n    if (this.props.onClickLightboxThumbnail && this.props.showLightboxThumbnails) return this.props.onClickLightboxThumbnail;\n    return null;\n  }\n\n  getOnClickImageFn() {\n    if (this.props.onClickImage) return this.props.onClickImage;\n    return this.onClickImage;\n  }\n\n  getOnClickPrevFn() {\n    if (this.props.onClickPrev) return this.props.onClickPrev;\n    return this.gotoPrevious;\n  }\n\n  getOnClickNextFn() {\n    if (this.props.onClickNext) return this.props.onClickNext;\n    return this.gotoNext;\n  }\n\n  calculateCutOff(len, delta, items) {\n    var cutoff = [];\n    var cutsum = 0;\n\n    for (var i in items) {\n      var item = items[i];\n      var fractOfLen = item.scaletwidth / len;\n      cutoff[i] = Math.floor(fractOfLen * delta);\n      cutsum += cutoff[i];\n    }\n\n    var stillToCutOff = delta - cutsum;\n\n    while (stillToCutOff > 0) {\n      for (i in cutoff) {\n        cutoff[i]++;\n        stillToCutOff--;\n        if (stillToCutOff < 0) break;\n      }\n    }\n\n    return cutoff;\n  }\n\n  buildImageRow(items, containerWidth) {\n    var row = [];\n    var len = 0;\n    var imgMargin = 2 * this.props.margin;\n\n    while (items.length > 0 && len < containerWidth) {\n      var item = items.shift();\n      row.push(item);\n      len += item.scaletwidth + imgMargin;\n    }\n\n    var delta = len - containerWidth;\n\n    if (row.length > 0 && delta > 0) {\n      var cutoff = this.calculateCutOff(len, delta, row);\n\n      for (var i in row) {\n        var pixelsToRemove = cutoff[i];\n        item = row[i];\n        item.marginLeft = -Math.abs(Math.floor(pixelsToRemove / 2));\n        item.vwidth = item.scaletwidth - pixelsToRemove;\n      }\n    } else {\n      for (var j in row) {\n        item = row[j];\n        item.marginLeft = 0;\n        item.vwidth = item.scaletwidth;\n      }\n    }\n\n    return row;\n  }\n\n  setThumbScale(item) {\n    item.scaletwidth = Math.floor(this.props.rowHeight * (item.thumbnailWidth / item.thumbnailHeight));\n  }\n\n  renderThumbs(containerWidth, images = this.state.images) {\n    if (!images) return [];\n    if (containerWidth == 0) return [];\n    var items = images.slice();\n\n    for (var t in items) {\n      this.setThumbScale(items[t]);\n    }\n\n    var thumbs = [];\n    var rows = [];\n\n    while (items.length > 0) {\n      rows.push(this.buildImageRow(items, containerWidth));\n    }\n\n    for (var r in rows) {\n      for (var i in rows[r]) {\n        var item = rows[r][i];\n\n        if (this.props.maxRows) {\n          if (r < this.props.maxRows) {\n            thumbs.push(item);\n          }\n        } else {\n          thumbs.push(item);\n        }\n      }\n    }\n\n    return thumbs;\n  }\n\n  render() {\n    var images = this.state.thumbnails.map((item, idx) => {\n      return /*#__PURE__*/_jsxDEV(Image, {\n        item: item,\n        index: idx,\n        margin: this.props.margin,\n        height: this.props.rowHeight,\n        isSelectable: this.props.enableImageSelection,\n        onClick: this.getOnClickThumbnailFn(),\n        onSelectImage: this.onSelectImage,\n        tagStyle: this.props.tagStyle,\n        tileViewportStyle: this.props.tileViewportStyle,\n        thumbnailStyle: this.props.thumbnailStyle,\n        thumbnailImageComponent: this.props.thumbnailImageComponent\n      }, \"Image-\" + idx + \"-\" + item.src, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 20\n      }, this);\n    });\n    var resizeIframeStyles = {\n      height: 0,\n      margin: 0,\n      padding: 0,\n      overflow: \"hidden\",\n      borderWidth: 0,\n      position: \"fixed\",\n      backgroundColor: \"transparent\",\n      width: \"100%\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: this.props.id,\n      className: \"ReactGridGallery\",\n      ref: c => this._gallery = c,\n      children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n        style: resizeIframeStyles,\n        ref: c => c && c.contentWindow && c.contentWindow.addEventListener('resize', this.onResize)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }, this), images, /*#__PURE__*/_jsxDEV(Lightbox, {\n        images: this.props.images,\n        backdropClosesModal: this.props.backdropClosesModal,\n        currentImage: this.state.currentImage,\n        preloadNextImage: this.props.preloadNextImage,\n        customControls: this.props.customControls,\n        enableKeyboardInput: this.props.enableKeyboardInput,\n        imageCountSeparator: this.props.imageCountSeparator,\n        isOpen: this.state.lightboxIsOpen,\n        onClickImage: this.getOnClickImageFn(),\n        onClickNext: this.getOnClickNextFn(),\n        onClickPrev: this.getOnClickPrevFn(),\n        showCloseButton: this.props.showCloseButton,\n        showImageCount: this.props.showImageCount,\n        onClose: this.closeLightbox,\n        width: this.props.lightboxWidth,\n        theme: this.props.theme,\n        onClickThumbnail: this.getOnClickLightboxThumbnailFn(),\n        showThumbnails: this.props.showLightboxThumbnails,\n        ...this.props.lightBoxProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nPhotoGallery.displayName = 'PhotoGallery';\nPhotoGallery.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    nano: PropTypes.string,\n    alt: PropTypes.string,\n    thumbnail: PropTypes.string.isRequired,\n    srcset: PropTypes.array,\n    caption: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    tags: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n      title: PropTypes.string.isRequired,\n      key: PropTypes.string\n    })),\n    thumbnailWidth: PropTypes.number.isRequired,\n    thumbnailHeight: PropTypes.number.isRequired,\n    isSelected: PropTypes.bool,\n    thumbnailCaption: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\n  })).isRequired,\n  id: PropTypes.string,\n  enableImageSelection: PropTypes.bool,\n  onSelectImage: PropTypes.func,\n  rowHeight: PropTypes.number,\n  maxRows: PropTypes.number,\n  margin: PropTypes.number,\n  onClickThumbnail: PropTypes.func,\n  lightboxWillOpen: PropTypes.func,\n  lightboxWillClose: PropTypes.func,\n  enableLightbox: PropTypes.bool,\n  backdropClosesModal: PropTypes.bool,\n  currentImage: PropTypes.number,\n  preloadNextImage: PropTypes.bool,\n  customControls: PropTypes.arrayOf(PropTypes.node),\n  currentImageWillChange: PropTypes.func,\n  enableKeyboardInput: PropTypes.bool,\n  imageCountSeparator: PropTypes.string,\n  isOpen: PropTypes.bool,\n  onClickImage: PropTypes.func,\n  onClickNext: PropTypes.func,\n  onClickPrev: PropTypes.func,\n  onClose: PropTypes.func,\n  showCloseButton: PropTypes.bool,\n  showImageCount: PropTypes.bool,\n  lightboxWidth: PropTypes.number,\n  tileViewportStyle: PropTypes.func,\n  thumbnailStyle: PropTypes.func,\n  showLightboxThumbnails: PropTypes.bool,\n  onClickLightboxThumbnail: PropTypes.func,\n  tagStyle: PropTypes.object,\n  thumbnailImageComponent: PropTypes.func,\n  lightBoxProps: PropTypes.object\n};\nPhotoGallery.defaultProps = {\n  id: \"ReactGridGallery\",\n  enableImageSelection: true,\n  rowHeight: 180,\n  margin: 2,\n  enableLightbox: true,\n  backdropClosesModal: false,\n  currentImage: 0,\n  preloadNextImage: true,\n  enableKeyboardInput: true,\n  imageCountSeparator: ' of ',\n  isOpen: false,\n  showCloseButton: true,\n  showImageCount: true,\n  lightboxWidth: 1024,\n  showLightboxThumbnails: false,\n  lightBoxProps: {}\n};\nmodule.exports = PhotoGallery;","map":{"version":3,"sources":["/Users/liza/Documents/GitHub/artwork-website/art/src/Gallery/PhotoGallery.js"],"names":["PropTypes","React","Component","Lightbox","Image","PhotoGallery","constructor","props","state","images","thumbnails","lightboxIsOpen","isOpen","currentImage","containerWidth","onResize","bind","closeLightbox","gotoImage","gotoNext","gotoPrevious","onClickImage","openLightbox","onSelectImage","componentDidMount","componentWillReceiveProps","np","length","setState","maxRows","renderThumbs","_gallery","clientWidth","componentDidUpdate","Math","floor","index","event","preventDefault","lightboxWillOpen","call","currentImageWillChange","lightboxWillClose","getOnClickThumbnailFn","onClickThumbnail","enableLightbox","getOnClickLightboxThumbnailFn","onClickLightboxThumbnail","showLightboxThumbnails","getOnClickImageFn","getOnClickPrevFn","onClickPrev","getOnClickNextFn","onClickNext","calculateCutOff","len","delta","items","cutoff","cutsum","i","item","fractOfLen","scaletwidth","stillToCutOff","buildImageRow","row","imgMargin","margin","shift","push","pixelsToRemove","marginLeft","abs","vwidth","j","setThumbScale","rowHeight","thumbnailWidth","thumbnailHeight","slice","t","thumbs","rows","r","render","map","idx","enableImageSelection","tagStyle","tileViewportStyle","thumbnailStyle","thumbnailImageComponent","src","resizeIframeStyles","height","padding","overflow","borderWidth","position","backgroundColor","width","id","c","contentWindow","addEventListener","backdropClosesModal","preloadNextImage","customControls","enableKeyboardInput","imageCountSeparator","showCloseButton","showImageCount","lightboxWidth","theme","lightBoxProps","displayName","propTypes","arrayOf","shape","string","isRequired","nano","alt","thumbnail","srcset","array","caption","oneOfType","element","tags","value","title","key","number","isSelected","bool","thumbnailCaption","func","node","onClose","object","defaultProps","module","exports"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Lightbox from 'react-images';\nimport Image from './Image.js';\n\nclass PhotoGallery extends Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            images: this.props.images,\n            thumbnails: [],\n            lightboxIsOpen: this.props.isOpen,\n            currentImage: this.props.currentImage,\n            containerWidth: 0\n        };\n\n        this.onResize = this.onResize.bind(this);\n        this.closeLightbox = this.closeLightbox.bind(this);\n        this.gotoImage = this.gotoImage.bind(this);\n        this.gotoNext = this.gotoNext.bind(this);\n        this.gotoPrevious = this.gotoPrevious.bind(this);\n        this.onClickImage = this.onClickImage.bind(this);\n        this.openLightbox = this.openLightbox.bind(this);\n        this.onSelectImage = this.onSelectImage.bind(this);\n    }\n\n    componentDidMount () {\n        this.onResize();\n    }\n\n    componentWillReceiveProps (np) {\n        if (this.state.currentImage > np.images.length - 1) {\n            this.setState({currentImage: np.images.length - 1});\n        }\n        if(this.state.images !== np.images || this.props.maxRows !== np.maxRows){\n            this.setState({\n                images: np.images,\n                thumbnails: this.renderThumbs(this._gallery.clientWidth,\n                                              np.images)\n            });\n        }\n    }\n\n    componentDidUpdate () {\n        if (!this._gallery) return;\n        if (this._gallery.clientWidth\n            !== this.state.containerWidth){\n            this.onResize();\n        }\n    }\n\n    onResize () {\n        if (!this._gallery) return;\n        this.setState({\n            containerWidth: Math.floor(this._gallery.clientWidth),\n            thumbnails: this.renderThumbs(this._gallery.clientWidth)\n        });\n    }\n\n    openLightbox (index, event) {\n        if (event) {\n            event.preventDefault();\n        }\n        if (this.props.lightboxWillOpen) {\n            this.props.lightboxWillOpen.call(this, index);\n        }\n        if (this.props.currentImageWillChange) {\n            this.props.currentImageWillChange.call(this, index);\n        }\n\n        this.setState({\n            currentImage: index,\n            lightboxIsOpen: true\n        });\n    }\n\n    closeLightbox () {\n        if (this.props.lightboxWillClose) {\n            this.props.lightboxWillClose.call(this);\n        }\n        if (this.props.currentImageWillChange) {\n            this.props.currentImageWillChange.call(this, 0);\n        }\n\n        this.setState({\n            currentImage: 0,\n            lightboxIsOpen: false\n        });\n    }\n\n    gotoPrevious () {\n        if (this.props.currentImageWillChange) {\n            this.props.currentImageWillChange.call(this, this.state.currentImage - 1);\n        }\n        this.setState({\n            currentImage: this.state.currentImage - 1\n        });\n    }\n\n    gotoNext () {\n        if (this.props.currentImageWillChange) {\n            this.props.currentImageWillChange.call(this, this.state.currentImage + 1);\n        }\n        this.setState({\n            currentImage: this.state.currentImage + 1\n        });\n    }\n\n    onClickImage () {\n        if (this.state.currentImage === this.props.images.length - 1)\n            return;\n        this.gotoNext();\n    }\n\n    onSelectImage (index, event) {\n        event.preventDefault();\n        if(this.props.onSelectImage)\n            this.props.onSelectImage.call(this, index, this.state.images[index]);\n    }\n\n    gotoImage (index) {\n        if (this.props.currentImageWillChange) {\n            this.props.currentImageWillChange.call(this, index);\n        }\n        this.setState({\n            currentImage: index\n        });\n    }\n\n    getOnClickThumbnailFn () {\n        if(!this.props.onClickThumbnail && this.props.enableLightbox)\n            return this.openLightbox;\n        if(this.props.onClickThumbnail)\n            return this.props.onClickThumbnail;\n        return null;\n    }\n\n    getOnClickLightboxThumbnailFn () {\n        if(!this.props.onClickLightboxThumbnail\n           && this.props.showLightboxThumbnails)\n            return this.gotoImage;\n        if(this.props.onClickLightboxThumbnail\n           && this.props.showLightboxThumbnails)\n            return this.props.onClickLightboxThumbnail;\n        return null;\n    }\n\n    getOnClickImageFn () {\n        if(this.props.onClickImage)\n            return this.props.onClickImage;\n        return this.onClickImage;\n    }\n\n    getOnClickPrevFn () {\n        if(this.props.onClickPrev)\n            return this.props.onClickPrev;\n        return this.gotoPrevious;\n    }\n\n    getOnClickNextFn () {\n        if(this.props.onClickNext)\n            return this.props.onClickNext;\n        return this.gotoNext;\n    }\n\n    calculateCutOff (len, delta, items) {\n        var cutoff = [];\n        var cutsum = 0;\n        for(var i in items) {\n            var item = items[i];\n            var fractOfLen = item.scaletwidth / len;\n            cutoff[i] = Math.floor(fractOfLen * delta);\n            cutsum += cutoff[i];\n        }\n\n        var stillToCutOff = delta - cutsum;\n        while(stillToCutOff > 0) {\n            for(i in cutoff) {\n                cutoff[i]++;\n                stillToCutOff--;\n                if (stillToCutOff < 0) break;\n            }\n        }\n        return cutoff;\n    }\n\n    buildImageRow (items, containerWidth) {\n        var row = [];\n        var len = 0;\n        var imgMargin = 2 * this.props.margin;\n        while(items.length > 0 && len < containerWidth) {\n            var item = items.shift();\n            row.push(item);\n            len += (item.scaletwidth + imgMargin);\n        }\n\n        var delta = len - containerWidth;\n        if(row.length > 0 && delta > 0) {\n            var cutoff = this.calculateCutOff(len, delta, row);\n            for(var i in row) {\n                var pixelsToRemove = cutoff[i];\n                item = row[i];\n                item.marginLeft = -Math.abs(Math.floor(pixelsToRemove / 2));\n                item.vwidth = item.scaletwidth - pixelsToRemove;\n            }\n        }\n        else {\n            for(var j in row) {\n                item = row[j];\n                item.marginLeft = 0;\n                item.vwidth = item.scaletwidth;\n            }\n        }\n        return row;\n    }\n\n    setThumbScale (item) {\n        item.scaletwidth =\n            Math.floor(this.props.rowHeight\n                       * (item.thumbnailWidth / item.thumbnailHeight));\n    }\n\n    renderThumbs (containerWidth, images = this.state.images) {\n        if (!images) return [];\n        if (containerWidth == 0) return [];\n\n        var items = images.slice();\n        for (var t in items) {\n            this.setThumbScale(items[t]);\n        }\n\n        var thumbs = [];\n        var rows = [];\n        while(items.length > 0) {\n            rows.push(this.buildImageRow(items, containerWidth));\n        }\n\n        for(var r in rows) {\n            for(var i in rows[r]) {\n                var item = rows[r][i];\n                if(this.props.maxRows) {\n                    if(r < this.props.maxRows) {\n                        thumbs.push(item);\n                    }\n                }\n                else {\n                    thumbs.push(item);\n                }\n            }\n        }\n        return thumbs;\n    }\n\n    render () {\n        var images = this.state.thumbnails.map((item, idx) => {\n            return <Image\n            key={\"Image-\"+idx+\"-\"+item.src}\n            item={item}\n            index={idx}\n            margin={this.props.margin}\n            height={this.props.rowHeight}\n            isSelectable={this.props.enableImageSelection}\n            onClick={this.getOnClickThumbnailFn()}\n            onSelectImage={this.onSelectImage}\n            tagStyle={this.props.tagStyle}\n            tileViewportStyle={this.props.tileViewportStyle}\n            thumbnailStyle={this.props.thumbnailStyle}\n            thumbnailImageComponent={this.props.thumbnailImageComponent}\n                />;});\n        var resizeIframeStyles = {\n            height: 0,\n            margin: 0,\n            padding: 0,\n            overflow: \"hidden\",\n            borderWidth: 0,\n            position: \"fixed\",\n            backgroundColor: \"transparent\",\n            width: \"100%\"\n        };\n        return (\n                <div id={this.props.id}\n            className=\"ReactGridGallery\"\n            ref={(c) => this._gallery = c}>\n                <iframe style={resizeIframeStyles}\n            ref={(c) => c && c.contentWindow\n                 && c.contentWindow.addEventListener('resize', this.onResize) } />\n                {images}\n                <Lightbox\n            images={this.props.images}\n            backdropClosesModal={this.props.backdropClosesModal}\n            currentImage={this.state.currentImage}\n\t    preloadNextImage={this.props.preloadNextImage}\n            customControls={this.props.customControls}\n            enableKeyboardInput={this.props.enableKeyboardInput}\n            imageCountSeparator={this.props.imageCountSeparator}\n            isOpen={this.state.lightboxIsOpen}\n            onClickImage={this.getOnClickImageFn()}\n            onClickNext={this.getOnClickNextFn()}\n            onClickPrev={this.getOnClickPrevFn()}\n            showCloseButton={this.props.showCloseButton}\n            showImageCount={this.props.showImageCount}\n            onClose={this.closeLightbox}\n            width={this.props.lightboxWidth}\n            theme={this.props.theme}\n            onClickThumbnail={this.getOnClickLightboxThumbnailFn()}\n            showThumbnails={this.props.showLightboxThumbnails}\n\t\t{...this.props.lightBoxProps}\n                />\n                </div>\n        );\n    }\n}\n\nPhotoGallery.displayName = 'PhotoGallery';\n\nPhotoGallery.propTypes = {\n    images: PropTypes.arrayOf(\n        PropTypes.shape({\n            src: PropTypes.string.isRequired,\n            nano: PropTypes.string,\n            alt: PropTypes.string,\n            thumbnail: PropTypes.string.isRequired,\n            srcset: PropTypes.array,\n            caption: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element\n            ]),\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    value: PropTypes.oneOfType([\n                        PropTypes.string,\n                        PropTypes.element\n                    ]).isRequired,\n                    title: PropTypes.string.isRequired,\n                    key: PropTypes.string\n                })\n            ),\n            thumbnailWidth: PropTypes.number.isRequired,\n            thumbnailHeight: PropTypes.number.isRequired,\n            isSelected: PropTypes.bool,\n            thumbnailCaption: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element\n            ])\n        })\n    ).isRequired,\n    id: PropTypes.string,\n    enableImageSelection: PropTypes.bool,\n    onSelectImage: PropTypes.func,\n    rowHeight: PropTypes.number,\n    maxRows: PropTypes.number,\n    margin: PropTypes.number,\n    onClickThumbnail: PropTypes.func,\n    lightboxWillOpen: PropTypes.func,\n    lightboxWillClose: PropTypes.func,\n    enableLightbox: PropTypes.bool,\n    backdropClosesModal: PropTypes.bool,\n    currentImage: PropTypes.number,\n    preloadNextImage: PropTypes.bool,\n    customControls: PropTypes.arrayOf(PropTypes.node),\n    currentImageWillChange: PropTypes.func,\n    enableKeyboardInput: PropTypes.bool,\n    imageCountSeparator: PropTypes.string,\n    isOpen: PropTypes.bool,\n    onClickImage: PropTypes.func,\n    onClickNext: PropTypes.func,\n    onClickPrev: PropTypes.func,\n    onClose: PropTypes.func,\n    showCloseButton: PropTypes.bool,\n    showImageCount: PropTypes.bool,\n    lightboxWidth: PropTypes.number,\n    tileViewportStyle: PropTypes.func,\n    thumbnailStyle: PropTypes.func,\n    showLightboxThumbnails: PropTypes.bool,\n    onClickLightboxThumbnail: PropTypes.func,\n    tagStyle: PropTypes.object,\n    thumbnailImageComponent: PropTypes.func,\n    lightBoxProps : PropTypes.object,\n};\n\nPhotoGallery.defaultProps = {\n    id: \"ReactGridGallery\",\n    enableImageSelection: true,\n    rowHeight: 180,\n    margin: 2,\n    enableLightbox: true,\n    backdropClosesModal: false,\n    currentImage: 0,\n    preloadNextImage: true,\n    enableKeyboardInput: true,\n    imageCountSeparator: ' of ',\n    isOpen: false,\n    showCloseButton: true,\n    showImageCount: true,\n    lightboxWidth: 1024,\n    showLightboxThumbnails: false,\n    lightBoxProps : {},\n};\n\nmodule.exports = PhotoGallery;"]},"metadata":{},"sourceType":"module"}