{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _inlineStylePrefixerStatic = require('inline-style-prefixer/static');\n\nvar _inlineStylePrefixerStatic2 = _interopRequireDefault(_inlineStylePrefixerStatic);\n\nvar _util = require('./util');\n/**\n * Generate CSS for a selector and some styles.\n *\n * This function handles the media queries, pseudo selectors, and descendant\n * styles that can be used in aphrodite styles.\n *\n * @param {string} selector: A base CSS selector for the styles to be generated\n *     with.\n * @param {Object} styleTypes: A list of properties of the return type of\n *     StyleSheet.create, e.g. [styles.red, styles.blue].\n * @param stringHandlers: See `generateCSSRuleset`\n * @param useImportant: See `generateCSSRuleset`\n *\n * To actually generate the CSS special-construct-less styles are passed to\n * `generateCSSRuleset`.\n *\n * For instance, a call to\n *\n *     generateCSSInner(\".foo\", {\n *       color: \"red\",\n *       \"@media screen\": {\n *         height: 20,\n *         \":hover\": {\n *           backgroundColor: \"black\"\n *         }\n *       },\n *       \":active\": {\n *         fontWeight: \"bold\",\n *         \">>bar\": {\n *           _names: { \"foo_bar\": true },\n *           height: 10,\n *         }\n *       }\n *     });\n *\n * will make 5 calls to `generateCSSRuleset`:\n *\n *     generateCSSRuleset(\".foo\", { color: \"red\" }, ...)\n *     generateCSSRuleset(\".foo:active\", { fontWeight: \"bold\" }, ...)\n *     generateCSSRuleset(\".foo:active .foo_bar\", { height: 10 }, ...)\n *     // These 2 will be wrapped in @media screen {}\n *     generateCSSRuleset(\".foo\", { height: 20 }, ...)\n *     generateCSSRuleset(\".foo:hover\", { backgroundColor: \"black\" }, ...)\n */\n\n\nvar generateCSS = function generateCSS(selector, styleTypes, stringHandlers, useImportant) {\n  var merged = styleTypes.reduce(_util.recursiveMerge);\n  var declarations = {};\n  var mediaQueries = {};\n  var pseudoStyles = {};\n  Object.keys(merged).forEach(function (key) {\n    if (key[0] === ':') {\n      pseudoStyles[key] = merged[key];\n    } else if (key[0] === '@') {\n      mediaQueries[key] = merged[key];\n    } else {\n      declarations[key] = merged[key];\n    }\n  });\n  return generateCSSRuleset(selector, declarations, stringHandlers, useImportant) + Object.keys(pseudoStyles).map(function (pseudoSelector) {\n    return generateCSSRuleset(selector + pseudoSelector, pseudoStyles[pseudoSelector], stringHandlers, useImportant);\n  }).join(\"\") + Object.keys(mediaQueries).map(function (mediaQuery) {\n    var ruleset = generateCSS(selector, [mediaQueries[mediaQuery]], stringHandlers, useImportant);\n    return mediaQuery + '{' + ruleset + '}';\n  }).join(\"\");\n};\n\nexports.generateCSS = generateCSS;\n/**\n * Helper method of generateCSSRuleset to facilitate custom handling of certain\n * CSS properties. Used for e.g. font families.\n *\n * See generateCSSRuleset for usage and documentation of paramater types.\n */\n\nvar runStringHandlers = function runStringHandlers(declarations, stringHandlers) {\n  var result = {};\n  Object.keys(declarations).forEach(function (key) {\n    // If a handler exists for this particular key, let it interpret\n    // that value first before continuing\n    if (stringHandlers && stringHandlers.hasOwnProperty(key)) {\n      result[key] = stringHandlers[key](declarations[key]);\n    } else {\n      result[key] = declarations[key];\n    }\n  });\n  return result;\n};\n/**\n * Generate a CSS ruleset with the selector and containing the declarations.\n *\n * This function assumes that the given declarations don't contain any special\n * children (such as media queries, pseudo-selectors, or descendant styles).\n *\n * Note that this method does not deal with nesting used for e.g.\n * psuedo-selectors or media queries. That responsibility is left to  the\n * `generateCSS` function.\n *\n * @param {string} selector: the selector associated with the ruleset\n * @param {Object} declarations: a map from camelCased CSS property name to CSS\n *     property value.\n * @param {Object.<string, function>} stringHandlers: a map from camelCased CSS\n *     property name to a function which will map the given value to the value\n *     that is output.\n * @param {bool} useImportant: A boolean saying whether to append \"!important\"\n *     to each of the CSS declarations.\n * @returns {string} A string of raw CSS.\n *\n * Examples:\n *\n *    generateCSSRuleset(\".blah\", { color: \"red\" })\n *    -> \".blah{color: red !important;}\"\n *    generateCSSRuleset(\".blah\", { color: \"red\" }, {}, false)\n *    -> \".blah{color: red}\"\n *    generateCSSRuleset(\".blah\", { color: \"red\" }, {color: c => c.toUpperCase})\n *    -> \".blah{color: RED}\"\n *    generateCSSRuleset(\".blah:hover\", { color: \"red\" })\n *    -> \".blah:hover{color: red}\"\n */\n\n\nvar generateCSSRuleset = function generateCSSRuleset(selector, declarations, stringHandlers, useImportant) {\n  var handledDeclarations = runStringHandlers(declarations, stringHandlers);\n  var prefixedDeclarations = (0, _inlineStylePrefixerStatic2['default'])(handledDeclarations);\n  var prefixedRules = (0, _util.flatten)((0, _util.objectToPairs)(prefixedDeclarations).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var key = _ref2[0];\n    var value = _ref2[1];\n\n    if (Array.isArray(value)) {\n      var _ret = function () {\n        // inline-style-prefix-all returns an array when there should be\n        // multiple rules, we will flatten to single rules\n        var prefixedValues = [];\n        var unprefixedValues = [];\n        value.forEach(function (v) {\n          if (v.indexOf('-') === 0) {\n            prefixedValues.push(v);\n          } else {\n            unprefixedValues.push(v);\n          }\n        });\n        prefixedValues.sort();\n        unprefixedValues.sort();\n        return {\n          v: prefixedValues.concat(unprefixedValues).map(function (v) {\n            return [key, v];\n          })\n        };\n      }();\n\n      if (typeof _ret === 'object') return _ret.v;\n    }\n\n    return [[key, value]];\n  }));\n  var rules = prefixedRules.map(function (_ref3) {\n    var _ref32 = _slicedToArray(_ref3, 2);\n\n    var key = _ref32[0];\n    var value = _ref32[1];\n    var stringValue = (0, _util.stringifyValue)(key, value);\n    var ret = (0, _util.kebabifyStyleName)(key) + ':' + stringValue + ';';\n    return useImportant === false ? ret : (0, _util.importantify)(ret);\n  }).join(\"\");\n\n  if (rules) {\n    return selector + '{' + rules + '}';\n  } else {\n    return \"\";\n  }\n};\n\nexports.generateCSSRuleset = generateCSSRuleset;","map":{"version":3,"sources":["/Users/liza/Documents/GitHub/artwork-website/art/node_modules/aphrodite/lib/generate.js"],"names":["Object","defineProperty","exports","value","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","Array","isArray","TypeError","_interopRequireDefault","obj","__esModule","_inlineStylePrefixerStatic","require","_inlineStylePrefixerStatic2","_util","generateCSS","selector","styleTypes","stringHandlers","useImportant","merged","reduce","recursiveMerge","declarations","mediaQueries","pseudoStyles","keys","forEach","key","generateCSSRuleset","map","pseudoSelector","join","mediaQuery","ruleset","runStringHandlers","result","hasOwnProperty","handledDeclarations","prefixedDeclarations","prefixedRules","flatten","objectToPairs","_ref","_ref2","_ret","prefixedValues","unprefixedValues","v","indexOf","sort","concat","rules","_ref3","_ref32","stringValue","stringifyValue","ret","kebabifyStyleName","importantify"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,cAAc,GAAI,YAAY;AAAE,WAASC,aAAT,CAAuBC,GAAvB,EAA4BC,CAA5B,EAA+B;AAAE,QAAIC,IAAI,GAAG,EAAX;AAAe,QAAIC,EAAE,GAAG,IAAT;AAAe,QAAIC,EAAE,GAAG,KAAT;AAAgB,QAAIC,EAAE,GAAGC,SAAT;;AAAoB,QAAI;AAAE,WAAK,IAAIC,EAAE,GAAGP,GAAG,CAACQ,MAAM,CAACC,QAAR,CAAH,EAAT,EAAiCC,EAAtC,EAA0C,EAAEP,EAAE,GAAG,CAACO,EAAE,GAAGH,EAAE,CAACI,IAAH,EAAN,EAAiBC,IAAxB,CAA1C,EAAyET,EAAE,GAAG,IAA9E,EAAoF;AAAED,QAAAA,IAAI,CAACW,IAAL,CAAUH,EAAE,CAACb,KAAb;;AAAqB,YAAII,CAAC,IAAIC,IAAI,CAACY,MAAL,KAAgBb,CAAzB,EAA4B;AAAQ;AAAE,KAAvJ,CAAwJ,OAAOc,GAAP,EAAY;AAAEX,MAAAA,EAAE,GAAG,IAAL;AAAWC,MAAAA,EAAE,GAAGU,GAAL;AAAW,KAA5L,SAAqM;AAAE,UAAI;AAAE,YAAI,CAACZ,EAAD,IAAOI,EAAE,CAAC,QAAD,CAAb,EAAyBA,EAAE,CAAC,QAAD,CAAF;AAAiB,OAAhD,SAAyD;AAAE,YAAIH,EAAJ,EAAQ,MAAMC,EAAN;AAAW;AAAE;;AAAC,WAAOH,IAAP;AAAc;;AAAC,SAAO,UAAUF,GAAV,EAAeC,CAAf,EAAkB;AAAE,QAAIe,KAAK,CAACC,OAAN,CAAcjB,GAAd,CAAJ,EAAwB;AAAE,aAAOA,GAAP;AAAa,KAAvC,MAA6C,IAAIQ,MAAM,CAACC,QAAP,IAAmBf,MAAM,CAACM,GAAD,CAA7B,EAAoC;AAAE,aAAOD,aAAa,CAACC,GAAD,EAAMC,CAAN,CAApB;AAA+B,KAArE,MAA2E;AAAE,YAAM,IAAIiB,SAAJ,CAAc,sDAAd,CAAN;AAA8E;AAAE,GAArO;AAAwO,CAAjoB,EAArB;;AAEA,SAASC,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIE,0BAA0B,GAAGC,OAAO,CAAC,8BAAD,CAAxC;;AAEA,IAAIC,2BAA2B,GAAGL,sBAAsB,CAACG,0BAAD,CAAxD;;AAEA,IAAIG,KAAK,GAAGF,OAAO,CAAC,QAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIG,WAAW,GAAG,SAASA,WAAT,CAAqBC,QAArB,EAA+BC,UAA/B,EAA2CC,cAA3C,EAA2DC,YAA3D,EAAyE;AACvF,MAAIC,MAAM,GAAGH,UAAU,CAACI,MAAX,CAAkBP,KAAK,CAACQ,cAAxB,CAAb;AAEA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,YAAY,GAAG,EAAnB;AAEA1C,EAAAA,MAAM,CAAC2C,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACvC,QAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAChBH,MAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoBR,MAAM,CAACQ,GAAD,CAA1B;AACH,KAFD,MAEO,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AACvBJ,MAAAA,YAAY,CAACI,GAAD,CAAZ,GAAoBR,MAAM,CAACQ,GAAD,CAA1B;AACH,KAFM,MAEA;AACHL,MAAAA,YAAY,CAACK,GAAD,CAAZ,GAAoBR,MAAM,CAACQ,GAAD,CAA1B;AACH;AACJ,GARD;AAUA,SAAOC,kBAAkB,CAACb,QAAD,EAAWO,YAAX,EAAyBL,cAAzB,EAAyCC,YAAzC,CAAlB,GAA2EpC,MAAM,CAAC2C,IAAP,CAAYD,YAAZ,EAA0BK,GAA1B,CAA8B,UAAUC,cAAV,EAA0B;AACtI,WAAOF,kBAAkB,CAACb,QAAQ,GAAGe,cAAZ,EAA4BN,YAAY,CAACM,cAAD,CAAxC,EAA0Db,cAA1D,EAA0EC,YAA1E,CAAzB;AACH,GAFiF,EAE/Ea,IAF+E,CAE1E,EAF0E,CAA3E,GAEOjD,MAAM,CAAC2C,IAAP,CAAYF,YAAZ,EAA0BM,GAA1B,CAA8B,UAAUG,UAAV,EAAsB;AAC9D,QAAIC,OAAO,GAAGnB,WAAW,CAACC,QAAD,EAAW,CAACQ,YAAY,CAACS,UAAD,CAAb,CAAX,EAAuCf,cAAvC,EAAuDC,YAAvD,CAAzB;AACA,WAAOc,UAAU,GAAG,GAAb,GAAmBC,OAAnB,GAA6B,GAApC;AACH,GAHa,EAGXF,IAHW,CAGN,EAHM,CAFd;AAMH,CAvBD;;AAyBA/C,OAAO,CAAC8B,WAAR,GAAsBA,WAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIoB,iBAAiB,GAAG,SAASA,iBAAT,CAA2BZ,YAA3B,EAAyCL,cAAzC,EAAyD;AAC7E,MAAIkB,MAAM,GAAG,EAAb;AAEArD,EAAAA,MAAM,CAAC2C,IAAP,CAAYH,YAAZ,EAA0BI,OAA1B,CAAkC,UAAUC,GAAV,EAAe;AAC7C;AACA;AACA,QAAIV,cAAc,IAAIA,cAAc,CAACmB,cAAf,CAA8BT,GAA9B,CAAtB,EAA0D;AACtDQ,MAAAA,MAAM,CAACR,GAAD,CAAN,GAAcV,cAAc,CAACU,GAAD,CAAd,CAAoBL,YAAY,CAACK,GAAD,CAAhC,CAAd;AACH,KAFD,MAEO;AACHQ,MAAAA,MAAM,CAACR,GAAD,CAAN,GAAcL,YAAY,CAACK,GAAD,CAA1B;AACH;AACJ,GARD;AAUA,SAAOQ,MAAP;AACH,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIP,kBAAkB,GAAG,SAASA,kBAAT,CAA4Bb,QAA5B,EAAsCO,YAAtC,EAAoDL,cAApD,EAAoEC,YAApE,EAAkF;AACvG,MAAImB,mBAAmB,GAAGH,iBAAiB,CAACZ,YAAD,EAAeL,cAAf,CAA3C;AAEA,MAAIqB,oBAAoB,GAAG,CAAC,GAAG1B,2BAA2B,CAAC,SAAD,CAA/B,EAA4CyB,mBAA5C,CAA3B;AAEA,MAAIE,aAAa,GAAG,CAAC,GAAG1B,KAAK,CAAC2B,OAAV,EAAmB,CAAC,GAAG3B,KAAK,CAAC4B,aAAV,EAAyBH,oBAAzB,EAA+CT,GAA/C,CAAmD,UAAUa,IAAV,EAAgB;AACtG,QAAIC,KAAK,GAAGzD,cAAc,CAACwD,IAAD,EAAO,CAAP,CAA1B;;AAEA,QAAIf,GAAG,GAAGgB,KAAK,CAAC,CAAD,CAAf;AACA,QAAI1D,KAAK,GAAG0D,KAAK,CAAC,CAAD,CAAjB;;AAEA,QAAIvC,KAAK,CAACC,OAAN,CAAcpB,KAAd,CAAJ,EAA0B;AACtB,UAAI2D,IAAI,GAAI,YAAY;AACpB;AACA;AAEA,YAAIC,cAAc,GAAG,EAArB;AACA,YAAIC,gBAAgB,GAAG,EAAvB;AAEA7D,QAAAA,KAAK,CAACyC,OAAN,CAAc,UAAUqB,CAAV,EAAa;AACvB,cAAIA,CAAC,CAACC,OAAF,CAAU,GAAV,MAAmB,CAAvB,EAA0B;AACtBH,YAAAA,cAAc,CAAC5C,IAAf,CAAoB8C,CAApB;AACH,WAFD,MAEO;AACHD,YAAAA,gBAAgB,CAAC7C,IAAjB,CAAsB8C,CAAtB;AACH;AACJ,SAND;AAQAF,QAAAA,cAAc,CAACI,IAAf;AACAH,QAAAA,gBAAgB,CAACG,IAAjB;AAEA,eAAO;AACHF,UAAAA,CAAC,EAAEF,cAAc,CAACK,MAAf,CAAsBJ,gBAAtB,EAAwCjB,GAAxC,CAA4C,UAAUkB,CAAV,EAAa;AACxD,mBAAO,CAACpB,GAAD,EAAMoB,CAAN,CAAP;AACH,WAFE;AADA,SAAP;AAKH,OAvBU,EAAX;;AAyBA,UAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAI,CAACG,CAAZ;AACjC;;AACD,WAAO,CAAC,CAACpB,GAAD,EAAM1C,KAAN,CAAD,CAAP;AACH,GAnCsC,CAAnB,CAApB;AAqCA,MAAIkE,KAAK,GAAGZ,aAAa,CAACV,GAAd,CAAkB,UAAUuB,KAAV,EAAiB;AAC3C,QAAIC,MAAM,GAAGnE,cAAc,CAACkE,KAAD,EAAQ,CAAR,CAA3B;;AAEA,QAAIzB,GAAG,GAAG0B,MAAM,CAAC,CAAD,CAAhB;AACA,QAAIpE,KAAK,GAAGoE,MAAM,CAAC,CAAD,CAAlB;AAEA,QAAIC,WAAW,GAAG,CAAC,GAAGzC,KAAK,CAAC0C,cAAV,EAA0B5B,GAA1B,EAA+B1C,KAA/B,CAAlB;AACA,QAAIuE,GAAG,GAAG,CAAC,GAAG3C,KAAK,CAAC4C,iBAAV,EAA6B9B,GAA7B,IAAoC,GAApC,GAA0C2B,WAA1C,GAAwD,GAAlE;AACA,WAAOpC,YAAY,KAAK,KAAjB,GAAyBsC,GAAzB,GAA+B,CAAC,GAAG3C,KAAK,CAAC6C,YAAV,EAAwBF,GAAxB,CAAtC;AACH,GATW,EASTzB,IATS,CASJ,EATI,CAAZ;;AAWA,MAAIoB,KAAJ,EAAW;AACP,WAAOpC,QAAQ,GAAG,GAAX,GAAiBoC,KAAjB,GAAyB,GAAhC;AACH,GAFD,MAEO;AACH,WAAO,EAAP;AACH;AACJ,CA1DD;;AA2DAnE,OAAO,CAAC4C,kBAAR,GAA6BA,kBAA7B","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _inlineStylePrefixerStatic = require('inline-style-prefixer/static');\n\nvar _inlineStylePrefixerStatic2 = _interopRequireDefault(_inlineStylePrefixerStatic);\n\nvar _util = require('./util');\n\n/**\n * Generate CSS for a selector and some styles.\n *\n * This function handles the media queries, pseudo selectors, and descendant\n * styles that can be used in aphrodite styles.\n *\n * @param {string} selector: A base CSS selector for the styles to be generated\n *     with.\n * @param {Object} styleTypes: A list of properties of the return type of\n *     StyleSheet.create, e.g. [styles.red, styles.blue].\n * @param stringHandlers: See `generateCSSRuleset`\n * @param useImportant: See `generateCSSRuleset`\n *\n * To actually generate the CSS special-construct-less styles are passed to\n * `generateCSSRuleset`.\n *\n * For instance, a call to\n *\n *     generateCSSInner(\".foo\", {\n *       color: \"red\",\n *       \"@media screen\": {\n *         height: 20,\n *         \":hover\": {\n *           backgroundColor: \"black\"\n *         }\n *       },\n *       \":active\": {\n *         fontWeight: \"bold\",\n *         \">>bar\": {\n *           _names: { \"foo_bar\": true },\n *           height: 10,\n *         }\n *       }\n *     });\n *\n * will make 5 calls to `generateCSSRuleset`:\n *\n *     generateCSSRuleset(\".foo\", { color: \"red\" }, ...)\n *     generateCSSRuleset(\".foo:active\", { fontWeight: \"bold\" }, ...)\n *     generateCSSRuleset(\".foo:active .foo_bar\", { height: 10 }, ...)\n *     // These 2 will be wrapped in @media screen {}\n *     generateCSSRuleset(\".foo\", { height: 20 }, ...)\n *     generateCSSRuleset(\".foo:hover\", { backgroundColor: \"black\" }, ...)\n */\nvar generateCSS = function generateCSS(selector, styleTypes, stringHandlers, useImportant) {\n    var merged = styleTypes.reduce(_util.recursiveMerge);\n\n    var declarations = {};\n    var mediaQueries = {};\n    var pseudoStyles = {};\n\n    Object.keys(merged).forEach(function (key) {\n        if (key[0] === ':') {\n            pseudoStyles[key] = merged[key];\n        } else if (key[0] === '@') {\n            mediaQueries[key] = merged[key];\n        } else {\n            declarations[key] = merged[key];\n        }\n    });\n\n    return generateCSSRuleset(selector, declarations, stringHandlers, useImportant) + Object.keys(pseudoStyles).map(function (pseudoSelector) {\n        return generateCSSRuleset(selector + pseudoSelector, pseudoStyles[pseudoSelector], stringHandlers, useImportant);\n    }).join(\"\") + Object.keys(mediaQueries).map(function (mediaQuery) {\n        var ruleset = generateCSS(selector, [mediaQueries[mediaQuery]], stringHandlers, useImportant);\n        return mediaQuery + '{' + ruleset + '}';\n    }).join(\"\");\n};\n\nexports.generateCSS = generateCSS;\n/**\n * Helper method of generateCSSRuleset to facilitate custom handling of certain\n * CSS properties. Used for e.g. font families.\n *\n * See generateCSSRuleset for usage and documentation of paramater types.\n */\nvar runStringHandlers = function runStringHandlers(declarations, stringHandlers) {\n    var result = {};\n\n    Object.keys(declarations).forEach(function (key) {\n        // If a handler exists for this particular key, let it interpret\n        // that value first before continuing\n        if (stringHandlers && stringHandlers.hasOwnProperty(key)) {\n            result[key] = stringHandlers[key](declarations[key]);\n        } else {\n            result[key] = declarations[key];\n        }\n    });\n\n    return result;\n};\n\n/**\n * Generate a CSS ruleset with the selector and containing the declarations.\n *\n * This function assumes that the given declarations don't contain any special\n * children (such as media queries, pseudo-selectors, or descendant styles).\n *\n * Note that this method does not deal with nesting used for e.g.\n * psuedo-selectors or media queries. That responsibility is left to  the\n * `generateCSS` function.\n *\n * @param {string} selector: the selector associated with the ruleset\n * @param {Object} declarations: a map from camelCased CSS property name to CSS\n *     property value.\n * @param {Object.<string, function>} stringHandlers: a map from camelCased CSS\n *     property name to a function which will map the given value to the value\n *     that is output.\n * @param {bool} useImportant: A boolean saying whether to append \"!important\"\n *     to each of the CSS declarations.\n * @returns {string} A string of raw CSS.\n *\n * Examples:\n *\n *    generateCSSRuleset(\".blah\", { color: \"red\" })\n *    -> \".blah{color: red !important;}\"\n *    generateCSSRuleset(\".blah\", { color: \"red\" }, {}, false)\n *    -> \".blah{color: red}\"\n *    generateCSSRuleset(\".blah\", { color: \"red\" }, {color: c => c.toUpperCase})\n *    -> \".blah{color: RED}\"\n *    generateCSSRuleset(\".blah:hover\", { color: \"red\" })\n *    -> \".blah:hover{color: red}\"\n */\nvar generateCSSRuleset = function generateCSSRuleset(selector, declarations, stringHandlers, useImportant) {\n    var handledDeclarations = runStringHandlers(declarations, stringHandlers);\n\n    var prefixedDeclarations = (0, _inlineStylePrefixerStatic2['default'])(handledDeclarations);\n\n    var prefixedRules = (0, _util.flatten)((0, _util.objectToPairs)(prefixedDeclarations).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        var key = _ref2[0];\n        var value = _ref2[1];\n\n        if (Array.isArray(value)) {\n            var _ret = (function () {\n                // inline-style-prefix-all returns an array when there should be\n                // multiple rules, we will flatten to single rules\n\n                var prefixedValues = [];\n                var unprefixedValues = [];\n\n                value.forEach(function (v) {\n                    if (v.indexOf('-') === 0) {\n                        prefixedValues.push(v);\n                    } else {\n                        unprefixedValues.push(v);\n                    }\n                });\n\n                prefixedValues.sort();\n                unprefixedValues.sort();\n\n                return {\n                    v: prefixedValues.concat(unprefixedValues).map(function (v) {\n                        return [key, v];\n                    })\n                };\n            })();\n\n            if (typeof _ret === 'object') return _ret.v;\n        }\n        return [[key, value]];\n    }));\n\n    var rules = prefixedRules.map(function (_ref3) {\n        var _ref32 = _slicedToArray(_ref3, 2);\n\n        var key = _ref32[0];\n        var value = _ref32[1];\n\n        var stringValue = (0, _util.stringifyValue)(key, value);\n        var ret = (0, _util.kebabifyStyleName)(key) + ':' + stringValue + ';';\n        return useImportant === false ? ret : (0, _util.importantify)(ret);\n    }).join(\"\");\n\n    if (rules) {\n        return selector + '{' + rules + '}';\n    } else {\n        return \"\";\n    }\n};\nexports.generateCSSRuleset = generateCSSRuleset;"]},"metadata":{},"sourceType":"script"}